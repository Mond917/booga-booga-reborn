-- Load Sirius Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the UI window
local Window = Rayfield:CreateWindow({
    Name = "Script by @decryp1 on yt",
    LoadingTitle = "Booga Booga",
    LoadingSubtitle = "by @decryp1 on yt",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil, -- Leave nil for default folder
       FileName = "SwingToolUI"
    }
})

-- Create the main tab
local MainTab = Window:CreateTab("Main", 4483362458) -- Tab with icon (optional)

-- Create the button to swing the tool once
MainTab:CreateButton({
    Name = "Repeat last action",
    Callback = function()
        -- Swing Tool logic when button is clicked

        -- Get necessary services and modules
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local bufferWriter = require(ReplicatedStorage.Modules.ByteNet.process.bufferWriter) -- Path to bufferWriter
        local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable")

        -- Allocate space in the buffer
        bufferWriter.alloc(16) -- Allocate fresh space in the buffer (16 bytes as an example)

        -- Write the tool swing action to the buffer
        bufferWriter.u8(1) -- Assuming 1 represents the swing action for the equipped tool

        -- Export the buffer data to be sent to the server
        local bufferData = bufferWriter.export()

        -- Send the buffer to the server to swing the tool
        ByteNetReliable:FireServer(bufferData)
    end
})

-- Create a toggle button to repeat the action every 0.1 seconds
local repeatAction = false -- Variable to track if the toggle is on

MainTab:CreateToggle({
    Name = "Auto-Repeat last action",
    CurrentValue = false, -- Default value
    Flag = "AutoRepeat", -- A flag to track the toggle state
    Callback = function(Value)
        repeatAction = Value -- Set the toggle state
        if repeatAction then
            -- Start repeating the action every 0.1 seconds
            while repeatAction do
                -- Get necessary services and modules
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local bufferWriter = require(ReplicatedStorage.Modules.ByteNet.process.bufferWriter) -- Path to bufferWriter
                local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable")

                -- Allocate space in the buffer
                bufferWriter.alloc(16) -- Allocate fresh space in the buffer (16 bytes as an example)

                -- Write the tool swing action to the buffer
                bufferWriter.u8(1) -- Assuming 1 represents the swing action for the equipped tool

                -- Export the buffer data to be sent to the server
                local bufferData = bufferWriter.export()

                -- Send the buffer to the server to swing the tool
                ByteNetReliable:FireServer(bufferData)

                -- Wait for 0.1 seconds before repeating
                wait(0.1)
            end
        end
    end
})
